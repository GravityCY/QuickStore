import groovy.json.JsonSlurper

import java.net.http.HttpClient
import java.net.http.HttpRequest
import java.net.http.HttpResponse

plugins {
    id "fabric-loom" version "1.7-SNAPSHOT"
    id "me.gravityio.replacementplugin" version "0.0.7" // my local experimental plugin, just delete if you fork
    id "me.modmuss50.mod-publish-plugin" version "0.6.3"
//    id "dev.kikugie.j52j" version "1.0.2"
}

version = "${rootProject.mod_version}+${project.name}"
group = "me.gravityio"

def javaVersionNum = project.java_version.toInteger()
def javaVersion = JavaVersion.toVersion(javaVersionNum)
def supportedVersions = project.minecraft_versions.split(" ").toList()

base {
    archivesName = project.mod_id
}

loom {
    runConfigs.all {
        ideConfigGenerated true // Run configurations are not created for subprojects by default
        runDir "../../run" // Use a shared run folder and just create separate worlds
    }
}

repositories {
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }
    maven {
        name 'Xander Maven'
        url 'https://maven.isxander.dev/releases'
    }
    maven {
        name = "Terraformers"
        url = "https://maven.terraformersmc.com/"
    }
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots/"
    }
    maven {
        name = 'ParchmentMC'
        url = 'https://maven.parchmentmc.org'
    }
}

project.dependencies.add("minecraft", "com.mojang:minecraft:${project.name}")
project.dependencies.add("mappings", loom.layered() {
    officialMojangMappings()
    parchment("org.parchmentmc.data:parchment-${project.parchment_version_mc}:${project.parchment_version}@zip")
})
project.dependencies.add("modImplementation", "net.fabricmc:fabric-loader:${rootProject.loader_version}")
// Optional
project.dependencies.add("modImplementation", "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}")

dependencies {
    if (project.name == "1.20" || project.name == "1.20.2") {
        modImplementation "dev.isxander.yacl:yet-another-config-lib-fabric:${project.yacl_version}"
    } else {
        modImplementation "dev.isxander:yet-another-config-lib:${project.yacl_version}-fabric"
    }
    modImplementation "com.terraformersmc:modmenu:${project.modmenu_version}"
//    modCompileOnly "maven.modrinth:blur-fabric:${blur_version}"
//    modImplementation "maven.modrinth:iris:1.7.0+1.20.6"
}

replacement {
    fileName = "README.md"
    types = ["modrinth", "curseforge"]
    values = [
            "fabric_api_url": ["https://modrinth.com/mod/fabric-api", "https://curseforge.com/minecraft/mc-mods/fabric-api"],
            "yacl_url": ["https://modrinth.com/mod/yacl", "https://curseforge.com/minecraft/mc-mods/yacl"],
            "modmenu_url": ["https://modrinth.com/mod/modmenu", "https://curseforge.com/minecraft/mc-mods/modmenu"]
    ]
}

tasks.register("depVersions") {
    group = "help"
    doLast {
        def projects = ["fabric-api", "modmenu", "yacl"]
        def client = HttpClient.newBuilder().build()
        for (aproject in projects) {
            def encLoaders = URLEncoder.encode("[\"fabric\"]", "UTF-8")
            def encVersions = URLEncoder.encode("[\"${project.name}\"]", "UTF-8")

            def query = "${aproject}/version?loaders=${encLoaders}&game_versions=${encVersions}"
            def uri = URI.create("https://api.modrinth.com/v2/project/${query}")
            def req = HttpRequest.newBuilder()
                    .uri(uri)
                    .header("User-Agent", "GravityCY/gradle_test_project/0.0.0")
                    .GET()
                    .build()

            def res = client.send(req, HttpResponse.BodyHandlers.ofString())
            def json = new JsonSlurper().parseText(res.body()) as List<Map<String, String>>
            println "Most recent version of ${aproject}: ${json[0].version_number}"
        }
    }
}

publishMods {
    file = remapJar.archiveFile
    modLoaders.add("fabric")
    changelog = rootProject.changelog
    type = STABLE
    displayName = "$rootProject.mod_name $project.version"

    modrinth {
        accessToken = providers.environmentVariable("MODRINTH_UPLOAD")
        projectId = rootProject.modrinth_id

        supportedVersions.forEach {
            minecraftVersions.add(it)
        }

        requires("fabric-api", "yacl")
        optional("modmenu")
    }

    curseforge {
        accessToken = providers.environmentVariable("CURSEFORGE_UPLOAD")
        projectId = rootProject.curseforge_id
        projectSlug = "itemio"

        supportedVersions.forEach {
            minecraftVersions.add(it)
        }

        javaVersions.add(javaVersion)
        clientRequired = true

        requires("fabric-api", "yacl")
        optional("modmenu")
    }
}

processResources  {
    def modProperties = [
            "mod_id": rootProject.mod_id,
            "mod_name": rootProject.mod_name,
            "mod_version": rootProject.mod_version,
            "mod_description": rootProject.mod_description,
            "mod_author": rootProject.mod_author,
            "mod_sources": rootProject.mod_sources,
            "mod_license": rootProject.mod_license,
            "loader_version": rootProject.loader_version,
            "minecraft_version_range": project.minecraft_version_range,
            "fabric_version": project.fabric_version,
            "yacl_version": project.yacl_version,
            "java_version": javaVersionNum
    ]

    def mixinProperties = [
            "java_version": javaVersionNum
    ]

    inputs.properties(modProperties)

    filesMatching("fabric.mod.json") {
        expand modProperties
    }
    filesMatching("itemio.compat.mixins.json") {
        expand mixinProperties
    }
    filesMatching("itemio.mixins.json") {
        expand mixinProperties
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = javaVersionNum
}

java {
    withSourcesJar()

    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
}

jar {
    from("LICENSE") {
        rename { "${it}_${base.archivesName.get()}" }
    }
}