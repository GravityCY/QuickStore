import net.darkhax.curseforgegradle.TaskPublishCurseForge

plugins {
    id "fabric-loom" version "1.6-SNAPSHOT"
    id "com.modrinth.minotaur" version "2.+"
    id 'net.darkhax.curseforgegradle' version "1.1.24"
    id "me.gravityio.replacementplugin" version "0.0.7" // my local experimental plugin, just delete if you fork
}

version = project.mod_version
group = "me.gravityio"

def changelog = "+ Fixed a bug when splitting items."
def supportedVersions = ["1.20", "1.20.1"]

project.dependencies.add("minecraft", "com.mojang:minecraft:${project.minecraft_version}")
project.dependencies.add("mappings", "net.fabricmc:yarn:${project.project.yarn_version}:v2")
project.dependencies.add("modImplementation", "net.fabricmc:fabric-loader:${project.loader_version}")
// Optional
project.dependencies.add("modImplementation", "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}")

base {
    archivesName = project.mod_id
}

repositories {
    maven {
        name 'Xander Maven'
        url 'https://maven.isxander.dev/releases'
    }
    maven {
        name = "Terraformers"
        url = "https://maven.terraformersmc.com/"
    }
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots/"
    }
}

dependencies {
    modImplementation "dev.isxander.yacl:yet-another-config-lib-fabric:${yacl_version}"
    modImplementation "com.terraformersmc:modmenu:${modmenu_version}"
}

replacement {
    fileName = "README.md"
    types = ["modrinth", "curseforge"]
    values = [
            "fabric_api_url": ["https://modrinth.com/mod/fabric-api", "https://curseforge.com/minecraft/mc-mods/fabric-api"],
            "yacl_url": ["https://modrinth.com/mod/yacl", "https://curseforge.com/minecraft/mc-mods/yacl"],
            "modmenu_url": ["https://modrinth.com/mod/modmenu", "https://curseforge.com/minecraft/mc-mods/modmenu"]
    ]
}


tasks.register("publishMod") {
    group = "publishing"

    dependsOn "publishCurseForge"
    dependsOn "modrinth"
}

tasks.register('publishCurseForge', TaskPublishCurseForge) {
    disableVersionDetection()

    group = "publishing"
    apiToken = System.getenv("CURSEFORGE_UPLOAD")

    def mainFile = upload(1031152, remapJar)
    mainFile.changelog = changelog
    supportedVersions.each {
        mainFile.addGameVersion(it)
    }
    mainFile.displayName = "${mod_name} ${mod_version}"
    mainFile.addEnvironment("Client")
    mainFile.addModLoader("Fabric")
    mainFile.releaseType = "release"
    mainFile.addJavaVersion("Java 17")
    mainFile.addRequirement("fabric-api")
    mainFile.addRequirement("yacl")
    mainFile.addOptional("modmenu")
}

modrinth {
    token = System.getenv("MODRINTH_UPLOAD")
    projectId = "item-io"
    versionName = "${mod_name} ${mod_version}"
    versionNumber = mod_version
    uploadFile = remapJar
    gameVersions = supportedVersions
    loaders = ["fabric"]
    delegate.changelog = changelog
    dependencies {
        required.project "fabric-api"
        required.project "yacl"
        optional.project "modmenu"
    }
}

processResources  {
    def modProperties = [
            "mod_id": mod_id,
            "mod_name": mod_name,
            "mod_version": mod_version,
            "mod_description": mod_description,
            "mod_author": mod_author,
            "mod_sources": mod_sources,
            "mod_license": mod_license,
            "loader_version": loader_version,
            "minecraft_version": minecraft_version
    ]

    inputs.properties(modProperties)

    filesMatching("fabric.mod.json") {
        expand modProperties
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 17
}

java {
    withSourcesJar()

    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

jar {
    from("LICENSE") {
        rename { "${it}_${base.archivesName.get()}" }
    }
}